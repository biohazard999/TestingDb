{
  "Id": "2019/05/26/t-is-for-testing-xaf-xpo-test-data-2",
  "Comments": [
    {
      "Id": "x-5YvOGvfPUv_EBe-lTUesQleVbcm94RQDlmyGwrdJc",
      "Name": "Andre S.",
      "GithubOrEmail": null,
      "Homepage": null,
      "Content": "Great article! Thank you! I'm looking forward to part 3 of the series.\nI really like the ObjectSpaceProviderBuilder and the XpoTypeInfoSourceBuilder. But I'm not sure, if I like the XpObjectBuilder. Of course the fluent style of\n\n```cs\nvar johnDoe = new JohnDoePersonBuilder()\n   .WithObjectSpace<johndoepersonbuilder, person=\"\">(os)\n   .WithSalutation(\"Mrs.\")\n```\n\nlooks quite good. But it necessary to write a lot of stupid code for the builders. A simple static helper like\n\n```cs\nprivate static Person CreateJohnDoe(IObjectSpace os)\n{\n   var person = os.CreateObject<person>();\n   person.FirstName = \"John\";\n   person.LastName = \"Doe\";\n   person.Salutation = \"Mr.\";\n   return person;\n}\n...\n\nvar johnDoe = CreateJohnDoe(os);\njohnDoe.FirstName = \"Jane\";\n```\n\nwill also work. Because we should use public setters for the properties in XAF/XPO, the BuilderPattern does not bring much benefit.\nAm I missing something?",
      "Date": "2020-10-05T15:47:08.2434392+02:00",
      "AvatarUrl": null,
      "Comments": []
    },
    {
      "Id": "zA3uUsIK6wbulgkshIhLYUBYR37fMd9Atn95-vKXnv8",
      "Name": "Manuel Grundner",
      "GithubOrEmail": null,
      "Homepage": "https://blog.delegate.at",
      "Content": "Hi Andre!\n\nThe main idea about the pattern is: you can change some aspects of the object in a specific test an be sure that no side effects occur.\n\nIn deed a simple helper is often enough, but as time fly's by and applications get larger and more complicated, so does test code. That's a code smell many teams miss.\n\nAnother example is for example: Take an entity Email, there is an incomming one and an outgoing one, both have different semantics (but share some properties) but are stored in the same table.\nWith 2 separate builders you can eliminate miss usage.\n\nBack to the testing example:\n\nImagine a project object. Each project has a kind property and a staff list containing the people working on it. Each staff can have a different role (manager and worker):\n\n```cs\nvar project = new ProjectBuilder()\n   .WithStaff(new JohnDoeManagerBuilder())\n   .WithStaff(new JaneDoeWorkerBuilder())\n   .WithKind(new ConstructionKindBuilder())\n   .Build();\n```\n\nIf the team agrees about the semantics, everybody knows what to expect and what defaults are set. Now you can take a shorthand and derive an DefaultProjectBuilder.\n\nBut if you use it and want to set a different kind for example:\n\n```cs\nvar medialDefaultProject = new DefaultProjectBuilder()\n   .WithKind(new MedicalKind())\n   .Build();\n```\n\nNo ConstructionKind is ever generated! So tests are focused and fast.\n\nHope this clears.\n\nPs.: Yeah it's a lot of code, but with some snipplet's or even code generators it's not that painful to maintain.\nPps: Builders should be focused on the domain problem not on the orm or data layer.",
      "Date": "2020-10-05T15:48:31.2641252+02:00",
      "AvatarUrl": "https://avatars3.githubusercontent.com/u/653905?v=4",
      "Comments": []
    },
    {
      "Id": "Silrt2Q0HofMX_tfX3WcXJSMvnS2qwhXW52irtSRmwU",
      "Name": "Andre S.",
      "GithubOrEmail": null,
      "Homepage": null,
      "Content": "> No ConstructionKind is ever generated! So tests are focused and fast.\n\nDoes make sense. With my helper/extension method approach a ConstructionKind (and also all other references in the object graph of the ConstructionKind) would be created and later be replaced with the MedicalKind.\nSomehow ugly. But do you really expect to see a performance impact?\n\n> with some snipplet's or even code generators it's not that painful to maintain\n\nUsing t4 templates for the builders sounds like a nice approach.",
      "Date": "2020-10-05T15:49:20.4963867+02:00",
      "AvatarUrl": null,
      "Comments": []
    }
  ]
}